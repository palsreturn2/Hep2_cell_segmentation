#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include "image.h"
#include "growcut.h"
#include "show_image.h"

#define NEIGHBOURS 4
/********************getSeedImage*********************************************************************************/
void initSeedPixel(GrayImage *img,GrayImage *fgm,GrayImage *bgm,Cell *cellOld)
{
	int i,j,*labels,nL;
	GrayImage temp;
	temp=imlabel(fgm,&labels,&nL);
	for(i=0;i<bgm->row;i++)
	{
		for(j=0;j<bgm->col;j++)
		{
			if(bgm->f[i][j]!=0)
			{
				cellOld->f[i][j].label=1;
				cellOld->f[i][j].strength=1;
				cellOld->f[i][j].intensity=img->f[i][j];
			}
			else if(fgm->f[i][j]!=0)
			{
				cellOld->f[i][j].label=temp.f[i][j]+1;
				cellOld->f[i][j].strength=1;
				cellOld->f[i][j].intensity=img->f[i][j];
			}
			else
			{
				cellOld->f[i][j].label=0;
				cellOld->f[i][j].strength=0;
				cellOld->f[i][j].intensity=img->f[i][j];
			}
		}
	}
}
/*******************Function to store the neighbours in an array**************************************************/
void getNeighbour(int ix,int iy,struct cell *N,Cell *cellOld)
{
	int K[NEIGHBOURS][2]={{-1,0},{0,-1},{0,1},{1,0}};
	int mx,my,i;
	for(i=0;i<NEIGHBOURS;i++)
	{
		mx=ix+K[i][0];
		my=iy+K[i][1];
		if(mx<0)
		mx=0;
		if(my<0)
		my=0;
		if(mx>=cellOld->row)
		mx=cellOld->row-1;
		if(my>=cellOld->col)
		my=cellOld->col-1;
		N[i].label=cellOld->f[mx][my].label;
		N[i].strength=cellOld->f[mx][my].strength;
		N[i].intensity=cellOld->f[mx][my].intensity;
	}
}
/*******************Function to calculate distance b/w two feature Vectors*************************************/
int calDisMag(struct cell cellOld_temp,struct cell N_temp)
{
	int dI;
	dI=cellOld_temp.intensity-N_temp.intensity;
	if(dI<0)
		return (-dI);
	return dI;
}
/******************Function to calculate g value****************************************************************/
float gFunction(int t,int gmax)
{
	float gval;
	gval=(1-((float)t/gmax));
	return gval;
}
/******************Function to implement the growCut algorithm**************************************************/
void growCut(Cell *cellOld,GrayImage *img)
{
	int ui,count=1,countold,gmax,dis;
	float gFinal;
	int i,j,k,flag;
	struct cell *N=(struct cell *)malloc(sizeof(struct cell)*NEIGHBOURS);
	Cell cellNew;
	cellNew.row=cellOld->row;
	cellNew.col=cellOld->col;
	cellNew.f=(struct cell **)malloc(sizeof(struct cell) * cellOld->row);
	for(i=0;i<cellOld->row;i++)
	cellNew.f[i]=(struct cell *)malloc(sizeof(struct cell) * cellOld->col);
	cellNew.row=img->row;
	cellNew.col=img->col;
	
	gmax=0;
	for(i=0;i<img->row;i++)
	{
		for(j=0;j<img->col;j++)
		{
			if(gmax<cellOld->f[i][j].intensity)
			gmax=cellOld->f[i][j].intensity;
		}
	}
	flag=1;
	countold=0;
	while(count>0)
	{
		flag=0;
		printf("Iteration no=%d\n",count);
		count=0;
		countold++;
		for(i=0;i<cellOld->row;i++)
		{
			for(j=0;j<cellOld->col;j++)
			{
				(cellNew.f[i][j]).label=cellOld->f[i][j].label;
				(cellNew.f[i][j]).strength=cellOld->f[i][j].strength;
				(cellNew.f[i][j]).intensity=cellOld->f[i][j].intensity;			
			
				getNeighbour(i,j,N,cellOld);
				for(k=0;k<=NEIGHBOURS;k++)
				{
					dis=calDisMag(cellOld->f[i][j],N[k]);
					gFinal=gFunction(dis,gmax);
					if((gFinal*(N[k].strength))>cellOld->f[i][j].strength && (gFinal*(N[k].strength))>cellNew->f[i][j].strength)
					{
						(cellNew.f[i][j]).label=N[k].label;
						(cellNew.f[i][j]).strength=gFinal*N[k].strength;
					}
				}
			}
		}
		for(i=0;i<img->row;i++)
		{
			for(j=0;j<img->col;j++)
			{
				if(cellOld->f[i][j].label!=cellNew.f[i][j].label)
				{
					cellOld->f[i][j].label=(cellNew.f[i][j]).label;
					cellOld->f[i][j].strength=(cellNew.f[i][j]).strength;
					cellOld->f[i][j].intensity=(cellNew.f[i][j]).intensity;
					count++;
				}
			}
		}
		/*if(countold==10)
		{
			for(i=0;i<img->row;i++)
			{
				for(j=0;j<img->col;j++)
				{
					if(cellOld->f[i][j].label!=0)
					{
						img->f[i][j]=cellOld->f[i][j].label;
					}
					else
					{
						img->f[i][j]=0;
					}
				}
			}
			//label2rgb(img);
			countold=0;
			
		}*/
	}
	for(i=0;i<img->row;i++)
	{
		for(j=0;j<img->col;j++)
		{
			if(cellOld->f[i][j].label!=0)
			{
				img->f[i][j]=cellOld->f[i][j].label;
			}
			else
			{
				img->f[i][j]=0;
			}
		}
	}
}
/******************Function to implement the Fast growCut algorithm**************************************************/
void fastgrowCut(Cell *cellOld,GrayImage *img)
{
	int ui,count=1,countold,gmax,dis;
	float gFinal;
	int i,j,k,flag;
	struct cell *N=(struct cell *)malloc(sizeof(struct cell)*NEIGHBOURS);
	Cell cellNew;
	cellNew.row=cellOld->row;
	cellNew.col=cellOld->col;
	cellNew.f=(struct cell **)malloc(sizeof(struct cell) * cellOld->row);
	for(i=0;i<cellOld->row;i++)
	cellNew.f[i]=(struct cell *)malloc(sizeof(struct cell) * cellOld->col);
	cellNew.row=img->row;
	cellNew.col=img->col;
	
	gmax=0;
	for(i=0;i<img->row;i++)
	{
		for(j=0;j<img->col;j++)
		{
			if(gmax<cellOld->f[i][j].intensity)
			gmax=cellOld->f[i][j].intensity;
		}
	}
	flag=1;
	countold=0;
	while(count>0)
	{
		flag=0;
		printf("Iteration no=%d\n",count);
		count=0;
		countold++;
		for(i=0;i<cellOld->row;i++)
		{
			for(j=0;j<cellOld->col;j++)
			{
				getNeighbour(i,j,N,cellOld);
				(cellNew.f[i][j]).label=cellOld->f[i][j].label;
				(cellNew.f[i][j]).strength=cellOld->f[i][j].strength;
				(cellNew.f[i][j]).intensity=cellOld->f[i][j].intensity;
				for(k=0;k<=NEIGHBOURS;k++)
				{
					dis=calDisMag(cellOld->f[i][j],N[k]);
					gFinal=gFunction(dis,gmax);
					if((gFinal*(N[k].strength))>cellOld->f[i][j].strength && (gFinal*(N[k].strength))>cellNew->f[i][j].strength)
					{
						(cellOld->f[i][j]).label=N[k].label;
						(cellOld->f[i][j]).strength=gFinal*N[k].strength;
					}
				}
			}
		}
		for(i=cellOld->row-1;i>=0;i--)
		{
			for(j=cellOld->col;j>=0;j--)
			{
				getNeighbour(i,j,N,cellOld);
				for(k=0;k<=NEIGHBOURS;k++)
				{
					dis=calDisMag(cellOld->f[i][j],N[k]);
					gFinal=gFunction(dis,gmax);
					if((gFinal*(N[k].strength))>cellOld->f[i][j].strength && (gFinal*(N[k].strength))>cellNew->f[i][j].strength)
					{
						(cellOld->f[i][j]).label=N[k].label;
						(cellOld->f[i][j]).strength=gFinal*N[k].strength;
					}
				}
			}
		}
		for(i=0;i<cellOld->row;i++)
		{
			for(j=0;j<cellOld->col;j++)
			{
				if(cellNew.f[i][j].label!=cellOld->f[i][j].label)
				count++;
			}
		}			
	}
	for(i=0;i<img->row;i++)
	{
		for(j=0;j<img->col;j++)
		{
			if(cellOld->f[i][j].label!=0)
			{
				img->f[i][j]=cellOld->f[i][j].label;
			}
			else
			{
				img->f[i][j]=0;
			}
		}
	}
}
	 
	
